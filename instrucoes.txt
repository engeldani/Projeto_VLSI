0nnn - SYS addr
	PC <- nnn
	* PC Write <- 1
	* Barramento de dados <- addr

00E0 - CLS
	* Clear display <- 1

00EE - RET
	PC <- stack[SP]
	* endereço da stack <- SP
	* barramento de dados <- dados da stack
	* PC <- barramento de dados
	SP--
	* entrada da ALU A <- SP
	* entrada da ALU B <- 1
	* operacao da ALU <- subtracao
	* SP <- saída da ALU [mux]

1nnn - JP addr
	PC <- nnn
	* PC Write <- 1
	* Barramento de dados <- addr
	* PC <- barramento de dados

2nnn - CALL addr
	PC <- nnn
	* PC Write <- 1
	* Barramento de dados <- addr
	* PC <- barramento de dados	
	stack[SP] <- PC
	* stack addr <- SP
	* stack data <- PC
	* stack write <- 1
	SP++
	* entrada da alu 1 <- SP
	* entrada da alu 2 <- 1
	* SP <- saída da ALU

3xkk - SE Vx, byte
	compare Vx == kk
	* ALU[0] <- V[x]
	* ALU[1] <- kk
	* Op ALU <- '=='
	se Vx == kk, pule a próxima instrução
	* PC Incr <- último bit da saída da ALU (1 ou 0)

4xkk - SNE Vx, byte
	compare Vx != kk
	* ALU[0] <- V[x]
	* ALU[1] <- kk
	* Op ALU <- '!=' (ou '==')
	se Vx != kk, pule a próxima instrução
	* PC Incr <- último bit da saída da ALU (1 ou 0) (ou, se usar op '==', inverter esse bit)

5xy0 - SE Vx, Vy
	compare Vx == Vy
	* ALU[0] <- V[x]
	* ALU[1] <- V[y]
	* Op ALU <- '=='
	se Vx == Vy, pule a próxima instrução
	* PC Incr <- último bit da saída da ALU (1 ou 0)

6xkk - LD Vx, byte
	Vx <- kk
	* V[x] <- kk (kk pode ser uma saída de imediato de 8 bits chamada kk do decodificador)

7xkk - ADD Vx, byte
	Vx = Vx + kk
	* ALU[0] <- V[x]
	* ALU[1] <- kk
	* ALU_op <- '+'
	* V[x] <- saída da ALU

8xy0 - LD Vx, Vy
	Vx <- Vy
	* V[x] <- V[y]

8xy1 - OR Vx, Vy
	Vx <- Vx OR Vy
	* ALU[0] <- V[x]
	* ALU[1] <- V[y]
	* ALU_op <- 'OR'
	* V[x] <- saída da ALU

8xy2 - AND Vx, Vy
	Vx <- Vx AND Vy
	* ALU[0] <- V[x]
	* ALU[1] <- V[y]
	* ALU_op <- 'AND'
	* V[x] <- saída da ALU

8xy3 - XOR Vx, Vy
	Vx <- Vx XOR Vy
	* ALU[0] <- V[x]
	* ALU[1] <- V[y]
	* ALU_op <- 'XOR'
	* V[x] <- saída da ALU

8xy4 - ADD Vx, Vy
	Vx <- Vx + Vy
	* ALU[0] <- V[x]
	* ALU[1] <- V[y]
	* ALU_op <- '+'
	* V[x] <- saída da ALU

8xy5 - SUB Vx, Vy
	Vx <- Vx - Vy
	* ALU[0] <- V[x]
	* ALU[1] <- V[y]
	* ALU_op <- '-'
	* V[x] <- saída da ALU

8xy6 - SHR Vx {, Vy}
	Setar o bit de underflow
	* V[f] <- lsb de Vx
	Vx <- Vx >> 1
	* ALU[0] <- Vx
	* ALU[1] <- indiferente ou 1?
	* Alu_op <- '>>'
	* V[x] = saída da ALU

8xy7 - SUBN Vx, Vy
	Setar o bit de borrow
	* ALU[0] <- Vy
	* ALU[1] <- Vx
	* ALU op <- '>'
	* V[f] <- saída da alu (1 ou 0)
	Vx <- Vx - Vy
	* ALU[0] <- V[x]
	* ALU[1] <- V[y]
	* ALU_op <- '-'
	* V[x] <- saída da ALU

8xyE - SHL Vx {, Vy}
	Setar o bit de overflow
	* V[f] <- msb de Vx
	Vx <- Vx << 1
	* ALU[0] <- Vx
	* ALU[1] <- indiferente ou 1?
	* Alu_op <- '<<'
	* V[x] = saída da ALU

9xy0 - SNE Vx, Vy
	compare Vx != Vy
	* ALU[0] <- V[x]
	* ALU[1] <- V[y]
	* Op ALU <- '!='
	se Vx != Vy, pule a próxima instrução
	* PC Incr <- último bit da saída da ALU (1 ou 0)

Annn - LD I, addr
	I <- nnn
	* I <- nnn

Bnnn - JP V0, addr
	PC <- V0 + addr
	* ALU[0] <- V[0]
	* ALU[1] <- addr
	* ALU OP <- '+'
	* PC <- saída da ALU

Cxkk - RND Vx, byte
	Vx = random byte AND kk
	* ALU[0] <- saída do LFSR (gerador de número aleatório)
	* ALU[1] <- kk
	* ALU OP <- AND
	* V[x] <- saída da ALU

Dxyn - DRW Vx, Vy, nibble
	para i de I a I+n: (I <- I + 1 a cada ciclo; * I incr <- 1)
		Ler da memória um byte do sprite
		* barramento de endereço de mem <- i
		* barramento de dados da mem <- mem[i]
		Ler do framebuffer o byte presente no local que será escrito
		* barramento do endereço do fb em x <- Vx
		* barramento do endereço do fb em y <- Vy
		* barramento de dados do fb <- fb[Vx, Vy]
		-- Próximo ciclo, após termos os dados do fb e memória
		Verificar colisão
		* ALU[0] <- dados da mem
		* ALU[1] <- dados do fb
		* ALU OP <- AND (colisão é quando um bit da mem que queremos escrever para o fb já é 1 no fb)
		* V[f] <- 1 se qualquer bit da saída da ALU for 1
		-- Próximo ciclo, após termos verificado a colisão
		Escrever no framebuffer após operação XOR (ou seja, seta bits diferentes, limpa bits iguais)
		* ALU[0] <- dados da mem
		* ALU[1] <- dados do fb
		* ALU OP <- 'XOR'
		* fb[Vx, Vy] <- saída da ALU

Ex9E - SKP Vx
	Verifica se tecla está pressionada
	* ALU[0] <- Vx
	* ALU[1] <- Tecla pressionada
	* ALU OP <- '='
	* Pc incr <- saída da ALU (0 ou 1)

ExA1 - SKNP Vx
	Verifica se tecla não está pressionada
	* ALU[0] <- Vx
	* ALU[1] <- Tecla pressionada
	* ALU OP <- '!='
	* Pc incr <- saída da ALU (0 ou 1)

Fx07 - LD Vx, DT
	* V[x] <- DT

Fx0A - LD Vx, K
	Esperar por pressionamento de tecla
	* HALT <- 1
	-- o CPU deve sair desse estado ao receber um sinal do módulo do teclado
	* V[x] <- Tecla pressionada

Fx15 - LD DT, Vx
	* DT <- Vx

Fx18 - LD ST, Vx
	* ST <- Vx
	Lembrar: enquanto ST > 0, sinal do buzzer = '1'

Fx1E - ADD I, Vx
	* ALU[0] <- I
	* ALU[1] <- Vx
	* ALU OP <- +
	* I <- saída da ALU

Fx29 - LD F, Vx
	Seta I para o endereço da fonte + dígito Vx
	I <- ENDEREÇO_BASE_FONTE + Vx
	* ALU[0] <- ENDEREÇO_BASE (hardcoded?)
	* ALU[1] <- Vx
	* ALU OP <- +
	* I <- saída da ALU

Fx33 - LD B, Vx
	1o - gravar centena em I e somar 1 em I
	* mem[i] <- BCD da centena de V[x]
	* i = i + 1
	2o - gravar a dezena em I e somar 1 em I
	* mem[I] <- BCD da dezena de V[x]
	* I = I + 1
	3o - gravar a unidade em I e voltar o valor para o I original
	* mem[I] < BCD das unidades de V[x]
	* I = I - 2
	Obs. existem algoritmos para converter de binário para BCD que não requerem divisao

Fx55 - LD [I], Vx
	Store context
	@todo

Fx65 - LD Vx, [I]
	Read context
	@todo
